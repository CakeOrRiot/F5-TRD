struct Point
{
    double x,y;
    Point(){}
    Point(double _x,double _y)
    {
        x=_x;
        y=_y;
    }
};

istream& operator>>(istream& in,Point& p)
{
    in>>p.x;
    in>>p.y;
    return in;
}

ostream& operator<<(ostream& out,const Point& p)
{
    out<<p.x<<" "<<p.y<<'\n';
    return out;
}

double operator%(const Point& p1,const Point& p2)
{
    return p1.x*p2.x+p1.y*p2.y;
}

Point operator+(Point p1,Point p2)
{
    return Point(p1.x+p2.x,p1.y+p2.y);
}

Point operator-(Point p)
{
    return Point(-p.x,-p.y);
}

Point operator-(Point p1,Point p2)
{
    return p1+(-p2);
}

Point operator*(Point p,double x)
{
    return Point(p.x*x,p.y*x);
}

Point operator*(double x,const Point p)
{
    return p*x;
}

double operator*(const Point p1,const Point p2)
{
    return p1.x*p2.y-p2.x*p1.y;
}

double lenSq(const Point& p)
{
    return p%p;
}

double len(const Point& p)
{
    return sqrt(lenSq(p));
}

int sign(double x)
{
    if (x<0) return -1;
    if(x>0) return 1;
    return 0;
}

Point rotate(const Point& p)
{
    return Point(-p.y, p.x);
}

Point rotate(const Point& p,double cosa, double sina)
{
        Point v = p;
        Point u = rotate(v);
        Point w = v * cosa + u * sina;
        return w;
}